---
title: "Assignment E: Tidying and Transforming Data in R"
author: "Madeleine Livaudais"
format: 
  html:
    embed-resources: true
editor: visual
---

## Assignment E: Tidying and Transforming Data in R

```{r, echo=FALSE}
#| label: packages
#| warning: false
#| message: false

library(tidyverse)
library(magrittr)

```

## Part 1: World Development Bank Data Dataset (WDBD.csv)

First, we will read in the data and separate the bottom information part from the data itself. This data has a lot of character columns. To tidy the data we first need to make a year column and convert the data into a value column based on the year for each country. 



```{r}
#| label: read bank data
#| warning: false
#| message: false

#Read in the bank data
#Slice off the meta data from the bottom into it's own data frame
bank_data_raw <- read.csv("WDBD.csv")
bank_data <- bank_data_raw

bank_data_info <- bank_data_raw %>% 
  slice(2982:3079)

```


Let's tidy the information data frame. 

```{r}
#put the header lines each as a vector and combine into one
headers1 <- as.character(bank_data_info[1, ])
headers2 <- as.character(bank_data_info[2,1:7])
new_headers <- c(headers1, headers2, c("n1", "n2", "n3", "n4"))

#remove the header rows
bank_data_info <- bank_data_info[-(1:2), ]

# create a new empty data frame and assign the headers
empty_matrix <- matrix(vector(), nrow = 48, ncol = 22)
bank_info_clean <- data.frame(empty_matrix)
colnames(bank_info_clean) <- new_headers

# loop to get the info that is all in two lines into one line each.
j <- 1
for (i in seq(1, 95, by = 2)) {
  part1 <- as.character(bank_data_info[i, ])
  part2 <- as.character(bank_data_info[i+1, ])
  comb_rows <- c(part1, part2)
  
  bank_info_clean[j, ] <- comb_rows
  j <- j+1
}

```

Still tidying the information data frame. 

```{r}
bank_info_clean <- bank_info_clean %>%
  #remove empty columns
  select(-n2, -n3, -n4) %>% 
  #replace empty cells with NA's
  mutate(across(everything(), ~na_if(., ""))) %>% 
  #Combine columns that were off sync
  mutate(`License URL` = coalesce(`License URL`, n1)) %>% 
  #remove unnecessary columns
  select(-n1) %>% 
  #rename to match data 
  rename(`Series Code` = Code, `Series Name` = `Indicator Name`) %>% 
  relocate(`Unit of measure`, .after = `License Type`)


```


Now let's tidy the actual data. 

```{r}
#| label: tidying bank data
# AI helped with some of this code 

bank_data <- bank_data %>% 
  #get rid of the meta data at the bottom
  slice(-(2977:3079)) %>%
  #rename the year columns to just be the year
  rename_with(
    ~str_extract(.x, "\\d{4}"),
    .cols = starts_with("X")
  ) %>% 
  #rename the first columns to have a space instead of a .
  rename_with(
    ~gsub("\\.", " ", .x), 
    .cols = 1:4
  ) %>% 
  #change the .. in the data to NA's 
  mutate(across(everything(), ~na_if(., ".."))) %>% 
  #Convert the year columns into a single year column and a value column
  pivot_longer(
    cols = c(`2018`:`2024`), 
    names_to = "Year", 
    values_to = "Value" 
  ) %>% 
  #rearrange columns
  relocate(`Series Code`, .after = `Country Code`) 

bank_data <- bank_data %>% 
  # separate the units out from the series name column
  separate_wider_delim(
    cols = "Series Name", 
    delim = " (", 
    names = c("Series Name", "Units"), 
    too_many = "merge", 
    too_few = "align_start") %>%
  mutate(Units = str_remove(Units, "\\)"))

bank_data <- bank_data %>%
  #combine metadata units column to fill NA's from series name units
  left_join(bank_info_clean %>% 
              select(`Series Code`, `Unit of measure`), 
              by = "Series Code") %>% 
  relocate(`Unit of measure`, .after = Units) %>%
  mutate(Units = coalesce(Units, `Unit of measure`)) %>% 
  select(-`Unit of measure`) %>% 
  relocate(Units, .after = Value)


```


## Part 2: Movies Data Dataset (movies.csv)

```{r}
#| label: read movies data
#| warning: false
#| message: false

#read in the data set
movie_data_raw <- read.csv("movies.csv")
movie_data <- movie_data_raw

```


Now, lets tidy the movies data. When I look at the raw data, I see that the tear the movie was made is attached in the same column as the movie title. That will need to be separated. All of the genres the movie falls into are listed in a single cell. These need to be separated into one line each. 


```{r}
#| label: movie data tidying

#Separate the year from the movie title and clean up
#Used AI to help fix my code to work
movie_data <- movie_data %>%
  mutate(
    year = str_extract(title, "\\((\\d{4})\\)"),
    year = str_remove_all(year, "[()]"),
    title = str_remove_all(title, "\\s\\(\\d{4}\\)")
  ) %>% 
  relocate(year, .after = movieId)

#Clean up movie titles so they're all the same format
#Used AI to help fix my code to work
movie_data <- movie_data |>
  mutate(
    # First, fix commas inside parentheses
    title = sub(
      pattern = "(\\(([^,]+), ([^,)]+)\\))",
      replacement = "(\\3 \\2)",
      x = title
    ),
    # Second, fix the general comma-and-word-at-end pattern
    title = sub(
      pattern = "^(.*), ([^,)]+)(?:\\s*)((?:\\(.*\\))?)$",
      replacement = "\\2 \\1 \\3",
      x = title
    ),
    # Third, clean up any extra whitespace
    title = str_squish(title)
  )

#Separate the genres out from being together
#Replaces no genre with NA
movie_data <- movie_data %>%
  separate_longer_delim(genres, delim = "|") %>%
  mutate(genres = na_if(genres, "(no genres listed)"))


#Rename columns
movie_data <-  movie_data %>% 
  rename(`Movie Id` = movieId, Year = year, Title = title, Genre = genres)

head(movie_data)
```
